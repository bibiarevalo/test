openapi: 3.0.3

info:
  title: API curso programador Back-end
  version: 1.0.0
  description: Esta api foi criada para validar os conhecimentos relacionados a back-end, na disciplina de Codificação para Back-end. Foi criado um CRUD para uma tabela de clientes, outro CRUD para tabela de produtos, rotas para autenticação dos clientes, validação de cookies JWT, entre outras bibliotecas como bcrypt para criptografia de senha, jest e supertest para testes automatizados, dotenv para salvar variáveis de ambiente, etc.

servers:
  - url: http://localhost:8001
    description: Servidor local de testes

paths:
  /auth/login:
    post:
      summary: Esta rota recebe email e senha, valida e retorna um cookie JWT em caso de sucesso
      parameters:
        - name: email
          in: query
          description: O email que o usuário fez cadastro
          required: true
          schema:
            type: string
        - name: senha
          in: query
          description: A senha cadastrada
          required: true
          schema:
            type: string

  /auth/logout:
    post:
      summary: Logout do cliente
      responses:
        '200':
          description: O usuário fez logout com sucesso e o token de autenticação foi invalidado.
        '401':
          description: Não autorizado, o usuário não está logado.

  /produtos:
    get:
      summary: Lista todos os produtos
      description: Esta rota lista todos os produtos e retorna um array contendo os objetos
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produtos'
        '401':
          description: Não autorizado
    post:
      summary: Cria um produto
      requestBody:
        description: Informações do novo produto a serem criadas, incluindo nome e preço.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Nome do produto a ser cadastrado.
                preco:
                  type: number
                  description: Preço do produto, deve ser um valor positivo.
      responses:
        '201':
          description: Produto criado com sucesso, retorna os dados do produto recém-criado.
        '406':
          description: Nome e preço devem ser informados; um ou mais campos estão faltando.
        '500':
          description: Erro no servidor ao tentar criar um produto.

  /produtos/{id}:
    get:
      summary: Obtém um produto específico por ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do produto a ser retornado.
          schema:
            type: string
      responses:
        '200':
          description: Retorna o produto específico, incluindo todas as suas informações.
        '404':
          description: Produto não encontrado, o ID fornecido não corresponde a nenhum produto existente.
    put:
      summary: Atualiza um produto existente
      parameters:
        - name: id
          in: path
          required: true
          description: ID do produto a ser atualizado.
          schema:
            type: string
      requestBody:
        description: Informações atualizadas do produto, permitindo modificar nome e preço.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Novo nome do produto.
                preco:
                  type: number
                  description: Novo preço do produto, deve ser um valor positivo.
      responses:
        '200':
          description: Produto atualizado com sucesso, retorna os dados do produto atualizado.
        '404':
          description: Produto não encontrado, o ID fornecido não corresponde a nenhum produto existente.
        '500':
          description: Erro no servidor ao tentar atualizar o produto.

    delete:
      summary: Deleta um produto
      parameters:
        - name: id
          in: path
          required: true
          description: ID do produto a ser deletado.
          schema:
            type: string
      responses:
        '204':
          description: Produto deletado com sucesso, não retorna conteúdo.
        '404':
          description: Produto não encontrado, o ID fornecido não corresponde a nenhum produto existente.
        '500':
          description: Erro no servidor ao tentar deletar o produto.

components:
  schemas:
    produtos:
      type: object
      properties:
        id:
          type: string
          description: Código identificador único do produto
        nome:
          type: string
          description: Nome do produto
        descricao:
          type: string
          description: Descrição do produto
        preco:
          type: number
          description: Preço do produto  
        imagem:
          type: string
          description: URL da imagem do produto  

  /clientes:
    get:
      summary: Lista de clientes
      responses:
        '200':
          description: Retorna todos os clientes em formato JSON, incluindo informações como nome, email e ID.
        '500':
          description: Erro no servidor ao tentar listar os clientes.

    post:
      summary: Cria um cliente
      requestBody:
        description: Informações do novo cliente a serem criadas, incluindo nome, email e senha.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Nome completo do cliente a ser cadastrado.
                email:
                  type: string
                  description: Endereço de e-mail do cliente, deve ser único.
                senha:
                  type: string
                  description: Senha do cliente, deve ter uma complexidade mínima.
      responses:
        '201':
          description: Cliente criado com sucesso, retorna os dados do cliente recém-criado.
        '406':
          description: Nome, email e senha devem ser informados; um ou mais campos estão faltando.
        '500':
          description: Erro no servidor ao tentar criar um cliente.
  /clientes/{id}:
    get:
      summary: Obtém um cliente específico por ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID do cliente a ser retornado.
          schema:
            type: string
      responses:
        '200':
          description: Retorna o cliente específico, incluindo todas as suas informações.
        '404':
          description: Cliente não encontrado, o ID fornecido não corresponde a nenhum cliente existente.
      put:
        summary: Atualiza um cliente existente
        parameters:
        - name: id
          in: path
          required: true
          description: ID do cliente a ser atualizado.
          schema:
            type: string
      requestBody:
        description: Informações atualizadas do cliente, permitindo modificar nome, email ou senha.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                  description: Novo nome do cliente.
                email:
                  type: string
                  description: Novo endereço de e-mail do cliente.
                senha:
                  type: string
                  description: Nova senha do cliente.
      responses:
        '200':
          description: Cliente atualizado com sucesso, retorna os dados do cliente atualizado.
        '404':
          description: Cliente não encontrado, o ID fornecido não corresponde a nenhum cliente existente.
        '500':
          description: Erro no servidor ao tentar atualizar o cliente.
      delete:
        summary: Deleta um cliente
        parameters:
        - name: id
          in: path
          required: true
          description: ID do cliente a ser deletado.
          schema:
            type: string
      responses:
        '204':
          description: Cliente deletado com sucesso, não retorna conteúdo.
        '404':
          description: Cliente não encontrado, o ID fornecido não corresponde a nenhum cliente existente.
        '500':
          description: Erro no servidor ao tentar deletar o cliente.
